'use strict';class e{constructor(a,b){switch(b){case "uniform":this.name=(b=/^u_(.+)/.exec(a))?b[1]:a;this.type=1;break;case "attribute":this.name=(b=/^a_(.+)/.exec(a))?b[1]:a,this.type=2}}}function g(a){const b=[];a.split("\n").forEach(c=>{(c=/^\s*(uniform|attribute)\s+\w*\s*(\w*);/.exec(c))&&b.push(new e(c[2],c[1]))})}
class h{constructor(a,b){this.name=a.name;var c=this.a=a.a;a=this.type=a.type;switch(a){case "vertex":var d=this.a.VERTEX_SHADER;break;case "fragment":d=this.a.FRAGMENT_SHADER;break;default:throw Error(`Unrecognized shader type "${a}"`);}d=this.b=c.createShader(d);c.shaderSource(d,b);c.compileShader(d);if(!c.getShaderParameter(d,c.COMPILE_STATUS))throw b=`Failed to compile ${this.name} ${a}-shader: ${c.getShaderInfoLog(d)}`,c.deleteShader(d),Error(b);g(b)}}
function k(a,...b){const c=a.a,d=a.b;b.forEach(f=>{a.g.push(f);c.attachShader(d,f.b)});return a}class l{constructor(a){this.name=a.name;this.f=a.f;a=this.a=a.a;this.c=!1;this.b=a.createProgram();this.g=[]}link(){if(this.c)return this;var a=this.a,b=this.b;a.linkProgram(b);if(!a.getProgramParameter(b,a.LINK_STATUS)){var c=`Failed to link ${this.name} program: ${a.getProgramInfoLog(b)}`;a.deleteProgram(b);throw Error(c);}this.c=!0;return this}};window.onload=function(){var a=document.getElementById("canvas"),b=window.getComputedStyle(a),c=parseInt(b.getPropertyValue("width"),10);b=parseInt(b.getPropertyValue("height"),10);const d=window.devicePixelRatio||1;1!==d&&(a.width=d*c,a.height=d*b);a=a.getContext("webgl",{antialias:!1});a.enable(a.DEPTH_TEST);c=new h({a,type:"vertex"},"\n    attribute vec3 a_position;\n    attribute vec2 a_texturePosition;\n\n    uniform mat4 u_projection;\n\n    varying highp vec2 v_texturePosition;\n\n    void main() {\n        vec4 position = u_projection * vec4(a_position, 1);\n\n        gl_Position = position / position.w;\n        v_texturePosition = a_texturePosition;\n    }\n");
b=new h({a,type:"fragment"},"\n    precision mediump float;\n\n    uniform sampler2D u_texture;\n\n    varying highp vec2 v_texturePosition;\n\n    void main() {\n        vec4 color = texture2D(u_texture, v_texturePosition.st);\n        if (color.a == 0.0) {\n            discard;\n        }\n        gl_FragColor = color;\n    }\n");k(new l({a,f:"projection"}),c,b).link();console.log("yoy oyou")};
